{"properties":{},"iconsrc": "dqmMicroservices.svg","description": "Address Cleanse DQMm example with REST API Client (Generation 2)","processes":{"py3datagenerator1":{"component":"com.sap.util.datageneratorpy3.v2","metadata":{"label":"Generate addresses","x":12,"y":26.49999976158142,"height":80,"width":120,"extensible":true,"filesRequired":["script.py"],"generation":2,"config":{"script":"\n\ndef do_tick():\n\n    # Define the columns of the table.\n    columnsDefinition = {\n        \"mixed\": api.DataTypeReference(\"scalar\", \"com.sap.core.string\"),\n        \"locality\": api.DataTypeReference(\"scalar\", \"com.sap.core.string\"),\n        \"region\": api.DataTypeReference(\"scalar\", \"com.sap.core.string\"),\n        \"postcode\": api.DataTypeReference(\"scalar\", \"com.sap.core.string\"),\n        \"country\": api.DataTypeReference(\"scalar\", \"com.sap.core.string\")\n    }\n\n    # Contents of the table.\n    rawTable = [\n        [\"875 NORTH MICHIGAN AVENUE, SUITE 104\", \"chicago\", \"il\", \"\", \"us\"],\n        [\"KOELNERER STR. 7\", \"STUTGART\", \"\", \"70376\", \"de\"]\n    ]\n\n    # Create the table.\n    table = api.Table(rawTable)\n\n    # Set output port to be the table type.\n    tableTypeRef = api.type_context.create_new_table(columns = columnsDefinition)\n    api.outputs.outTable.set_dynamic_type(tableTypeRef)\n\n    # Output the number of reocrds.\n    api.outputs.numRecords.publish(len(rawTable))\n\n    # Output the table.\n    _, writer = api.outputs.outTable.with_writer()\n    writer.write(table)\n    writer.close()\n\n    # Repeat every 5 seconds.\n    return 5\n\n\napi.add_timer(do_tick)\n\n\n"},"additionaloutports":[{"name":"outTable","type":"table","vtype-ID":"*"},{"name":"numRecords","type":"scalar","vtype-ID":"com.sap.core.int8"}]}},"python3operator1":{"component":"com.sap.system.python3Operator.v2","metadata":{"label":"Rows to requests","x":196.99999904632568,"y":12,"height":80,"width":120,"extensible":true,"filesRequired":["script.py"],"generation":2,"config":{"script":"\n\nimport json\nimport collections\n\n\ndef on_input(msg_id, header, body):\n\n    header = {\n        \"com.sap.headers.http.request\": [\n            '/addressCleanse',\n            'POST',\n            [\n                [\"content-type\", \"application/json\"]\n            ],\n        ]\n    }\n\n    # Define payload with the desired output fields\n    payload = {\n        \"outputFields\": [\n            \"std_addr_single_address\",\n            \"std_addr_locality\",\n            \"std_addr_region\",\n            \"std_addr_postcode_full\",\n            \"addr_latitude\",\n            \"addr_longitude\"\n        ]\n    }\n\n    # Read the table\n    reader = body.get_reader()\n    table = reader.read(-1)\n\n    # Get the column names\n    tableTypeRef = table.get_type_reference()\n    typeContext = api.type_context.get_vtype(tableTypeRef)\n    columnNames = list(typeContext.columns.keys())\n\n    # For each record in the table...\n    for r in table:\n\n        # Construct the addressInput part of the payload\n        i = 0\n        addressInput = {}\n        for c in columnNames:\n            addressInput[c] = r[i]\n            i = i + 1\n\n        # Add the addressInput to the payload\n        payload[\"addressInput\"] = addressInput\n\n        # Output the recquest for the REST API client\n        val = json.dumps(payload)\n        api.outputs.output.publish(val, -1, header)\n\n\n\napi.set_port_callback(\"input\", on_input)\n\n"},"additionalinports":[{"name":"input","type":"table","isPropagated":true,"vtype-ID":"*"}],"additionaloutports":[{"name":"output","type":"scalar","vtype-ID":"com.sap.core.binary"}]}},"terminal1":{"component":"com.sap.util.terminal.v2","metadata":{"label":"Terminal","x":719.9999980926514,"y":26.49999976158142,"height":80,"width":120,"allowedStarPort":true,"generation":2,"ui":"dynpath","config":{},"inports":[{"name":"in","type":"scalar","isPropagated":true,"vtype-ID":"com.sap.core.string"}]}},"restapiclient1":{"component":"com.sap.restapi.client","metadata":{"label":"REST API Client","x":365.9999990463257,"y":12,"height":80,"width":120,"generation":2,"config":{"connection":{"connectionID":"dqmm"}}}},"python3operator2":{"component":"com.sap.system.python3Operator.v2","metadata":{"label":"Parse response","x":550.9999980926514,"y":26.49999976158142,"height":80,"width":120,"extensible":true,"filesRequired":["script.py"],"generation":2,"config":{"script":"\nimport json\n\nfieldNames = \"\"\nrows = \"\"\nnumExpected = 0\nnumReceived = 0\n\ndef on_numRecords(msg_id, header, body):\n    global numExpected\n    numExpected = body.get()\n\ndef on_input(msg_id, header, body):\n    api.logger.info(\"in on_input\")\n    global colNames\n    global rows\n    global numExpected\n    global numReceived\n\n    # Record that we received a response.\n    numReceived += 1\n\n    # Read the response\n    response_header = header['com.sap.headers.http.response']\n\n    # Throw an exception if the request was not successful.\n    status_code = response_header[0]\n    if status_code != 200:\n        raise Exception(f\"expected status_code [200], received [{status_code}] instead\")\n\n    # Read the response.\n    response = json.loads(body.get_reader().read(-1))\n\n    # If this is the first response received then extract the field names for the header of the CSV.\n    if (numReceived == 1):\n        fieldNames = \"\"\n        for key in response:\n            fieldNames += doubleQuote(key) + \",\"\n        rows += stripComma(fieldNames) + \"\\n\"\n\n    # Create a row for the CSV.\n    row = \"\"\n    for val in response.values():\n        row += doubleQuote(str(val)) + \",\"\n    rows += stripComma(row) + \"\\n\"\n\n    # If we have received all of the expected responses then output the CSV.\n    if numReceived == numExpected:\n        val = str(rows)\n        api.outputs.output.publish(val)\n        fieldNames = \"\"\n        rows = \"\"\n        numReceived = 0\n\ndef doubleQuote(field):\n    return '\"' + field + '\"'\n    \ndef stripComma(field):\n    return field[:len(field)-1]\n\n\n\napi.set_port_callback(\"input\", on_input)\napi.set_port_callback(\"numRecords\", on_numRecords)\n"},"additionalinports":[{"name":"input","type":"scalar","vtype-ID":"com.sap.core.binary"},{"name":"numRecords","type":"scalar","vtype-ID":"com.sap.core.int8"}],"additionaloutports":[{"name":"output","type":"scalar","vtype-ID":"com.sap.core.string"}]}}},"groups":[],"connections":[{"metadata":{"points":"136,66.49999976158142 163.99999952316284,66.49999976158142 163.99999952316284,52 191.99999904632568,52"},"src":{"port":"outTable","process":"py3datagenerator1"},"tgt":{"port":"input","process":"python3operator1"}},{"metadata":{"points":"320.9999990463257,52 360.9999990463257,52"},"src":{"port":"output","process":"python3operator1"},"tgt":{"port":"request","process":"restapiclient1"}},{"metadata":{"points":"489.9999990463257,43 517.9999985694885,43 517.9999985694885,57.49999976158142 545.9999980926514,57.49999976158142"},"src":{"port":"response","process":"restapiclient1"},"tgt":{"port":"input","process":"python3operator2"}},{"metadata":{"points":"674.9999980926514,66.49999976158142 714.9999980926514,66.49999976158142"},"src":{"port":"output","process":"python3operator2"},"tgt":{"port":"in","process":"terminal1"}},{"metadata":{"points":"136,84.49999976158142 163.99999952316284,84.49999976158142 163.99999952316284,119.99999952316284 517.9999985694885,119.99999952316284 517.9999985694885,75.49999976158142 545.9999980926514,75.49999976158142"},"src":{"port":"numRecords","process":"py3datagenerator1"},"tgt":{"port":"numRecords","process":"python3operator2"}}],"inports":{},"outports":{},"metadata":{"generation":2}}
